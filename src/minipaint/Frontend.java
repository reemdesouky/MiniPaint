/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package minipaint;

import java.awt.BorderLayout;
import java.awt.Color;
import java.util.*;
import java.awt.Graphics;
import java.awt.Point;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import static java.lang.Integer.parseInt;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author Reem
 */
public class Frontend extends javax.swing.JFrame implements DrawingEngine {

    /**
     * Creates new form Frontend
     */
    public Frontend() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jPanel1 = new DrawingPanel();
        squareButton = new javax.swing.JButton();
        circleButton = new javax.swing.JButton();
        lineButton = new javax.swing.JButton();
        rectButton = new javax.swing.JButton();
        jCombo = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        colorizeButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        resizeButton = new javax.swing.JButton();
        moveButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Vector Drawing Application");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 443, Short.MAX_VALUE)
        );

        squareButton.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        squareButton.setForeground(new java.awt.Color(0, 0, 204));
        squareButton.setText("Square");
        squareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                squareButtonActionPerformed(evt);
            }
        });

        circleButton.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        circleButton.setForeground(new java.awt.Color(0, 0, 204));
        circleButton.setText("Circle");
        circleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleButtonActionPerformed(evt);
            }
        });

        lineButton.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lineButton.setForeground(new java.awt.Color(0, 0, 204));
        lineButton.setText("Line Segment");
        lineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineButtonActionPerformed(evt);
            }
        });

        rectButton.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        rectButton.setForeground(new java.awt.Color(0, 0, 204));
        rectButton.setText("Rectangle");
        rectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectButtonActionPerformed(evt);
            }
        });

        jCombo.setEditable(true);
        jCombo.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jCombo.setForeground(new java.awt.Color(0, 0, 153));
        jCombo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText(" Select Shape");

        colorizeButton.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        colorizeButton.setText("Colorize");
        colorizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorizeButtonActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        resizeButton.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        resizeButton.setText("Resize");
        resizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizeButtonActionPerformed(evt);
            }
        });

        moveButton.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        moveButton.setText("Move");
        moveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveButtonActionPerformed(evt);
            }
        });

        saveButton.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        loadButton.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(circleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lineButton, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(squareButton, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(rectButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(colorizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(resizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(moveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lineButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(squareButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(circleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colorizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(116, 116, 116))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineButtonActionPerformed
        JTextField xField = new JTextField(5);
        JTextField yField = new JTextField(5);
        JTextField lineField = new JTextField(5);

        JPanel panel = new JPanel();
        panel.add(new JLabel("X:"));
        panel.add(xField);
        panel.add(new JLabel("Y:"));
        panel.add(yField);
        panel.add(new JLabel("Length:"));
        panel.add(lineField);

        try {
            int result = JOptionPane.showConfirmDialog(null, panel,
                    "Enter Line Properties", JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_OPTION) {

                if (xField.getText().isEmpty() || yField.getText().isEmpty() || lineField.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please enter values for X, Y, and length.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (Double.parseDouble(xField.getText()) <= 0
                        || Double.parseDouble(yField.getText()) <= 0
                        || Double.parseDouble(lineField.getText()) <= 0) {
                    JOptionPane.showMessageDialog(null, "Numbers can not be zero or less!", "Message", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (Double.parseDouble(xField.getText()) > 400
                        || Double.parseDouble(yField.getText()) > 500
                        || Double.parseDouble(lineField.getText()) > 200) {
                    JOptionPane.showMessageDialog(null, "Numbers are too big", "Message", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                Line line = new Line();
                Point position = new Point();
                position.setLocation(Double.parseDouble(xField.getText()), Double.parseDouble(yField.getText()));
                Map<String, Double> map = new HashMap<>();
                map.put("length", Double.valueOf(lineField.getText()));
                line.setProperties(map);
                Color c = JColorChooser.showDialog(null, "Choose a Color", Color.BLACK);
                line.setColor(c);

                line.setPosition(position);
                shapes.add(line);
                jPanel1.repaint();
                jCombo.addItem("Line" + i);
                i++;

            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter proper Numbers", "Message", JOptionPane.ERROR_MESSAGE);
        }    }//GEN-LAST:event_lineButtonActionPerformed

    private void squareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_squareButtonActionPerformed
        JTextField xField = new JTextField(5);
        JTextField yField = new JTextField(5);
        JTextField sidelengthField = new JTextField(5);

        JPanel panel = new JPanel();
        panel.add(new JLabel("X:"));
        panel.add(xField);
        panel.add(new JLabel("Y:"));
        panel.add(yField);
        panel.add(new JLabel("Side Length:"));
        panel.add(sidelengthField);

        try {
            int result = JOptionPane.showConfirmDialog(null, panel,
                    "Enter square Properties", JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_OPTION) {

                if (xField.getText().isEmpty() || yField.getText().isEmpty() || sidelengthField.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please enter values for X, Y, and length.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (Double.parseDouble(xField.getText()) <= 0
                        || Double.parseDouble(yField.getText()) <= 0
                        || Double.parseDouble(sidelengthField.getText()) <= 0) {
                    JOptionPane.showMessageDialog(null, "Numbers can not be zero or less!", "Message", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (Double.parseDouble(xField.getText()) > 400
                        || Double.parseDouble(yField.getText()) > 500
                        || Double.parseDouble(sidelengthField.getText()) > 200) {
                    JOptionPane.showMessageDialog(null, "Numbers are too big", "Message", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                Square square = new Square();
                Point position = new Point();
                position.setLocation(Double.parseDouble(xField.getText()), Double.parseDouble(yField.getText()));
                Map<String, Double> map = new HashMap<>();
                map.put("length", Double.valueOf(sidelengthField.getText()));
                square.setProperties(map);
                Color c = JColorChooser.showDialog(null, "Choose a Color", Color.BLACK);
                square.setColor(c);

                square.setPosition(position);
                shapes.add(square);
                jPanel1.repaint();
                jCombo.addItem("Square" + i);
                i++;

            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter proper Numbers", "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_squareButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int selectedIndex = jCombo.getSelectedIndex();
        if (selectedIndex >= 0) {
            shapes.remove(selectedIndex);
            jCombo.removeItemAt(selectedIndex);
            jPanel1.repaint();
        } else {
            JOptionPane.showMessageDialog(null, "Please select a shape.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void circleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleButtonActionPerformed
        JTextField xField = new JTextField(5);
        JTextField yField = new JTextField(5);
        JTextField radiusField = new JTextField(5);

        JPanel panel = new JPanel();
        panel.add(new JLabel("X:"));
        panel.add(xField);
        panel.add(new JLabel("Y:"));
        panel.add(yField);
        panel.add(new JLabel("Radius:"));
        panel.add(radiusField);

        try {
            int result = JOptionPane.showConfirmDialog(null, panel,
                    "Enter Circle Properties", JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_OPTION) {

                if (xField.getText().isEmpty() || yField.getText().isEmpty() || radiusField.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please enter values for X, Y, and radius.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (Double.parseDouble(xField.getText()) <= 0
                        || Double.parseDouble(yField.getText()) <= 0
                        || Double.parseDouble(radiusField.getText()) <= 0) {
                    JOptionPane.showMessageDialog(null, "Numbers can't equal zero or less", "Message", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (Double.parseDouble(xField.getText()) > 400
                        || Double.parseDouble(yField.getText()) > 500
                        || Double.parseDouble(radiusField.getText()) > 200) {
                    JOptionPane.showMessageDialog(null, "Numbers are too big", "Message", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                Circle circle = new Circle();
                Point position = new Point();
                position.setLocation(Double.parseDouble(xField.getText()), Double.parseDouble(yField.getText()));
                Map<String, Double> map = new HashMap<>();
                map.put("radius", Double.valueOf(radiusField.getText()));
                circle.setProperties(map);
                Color c = JColorChooser.showDialog(null, "Choose a Color", Color.BLACK);
                circle.setColor(c);

                circle.setPosition(position);
                shapes.add(circle);
                jPanel1.repaint();
                jCombo.addItem("Circle" + i);
                i++;

            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter proper Numbers", "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_circleButtonActionPerformed

    private void jComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboActionPerformed

    }//GEN-LAST:event_jComboActionPerformed

    private void rectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectButtonActionPerformed
        JTextField xField = new JTextField(5);
        JTextField yField = new JTextField(5);
        JTextField heightField = new JTextField(5);
        JTextField widthField = new JTextField(5);

        JPanel panel = new JPanel();
        panel.add(new JLabel("X:"));
        panel.add(xField);
        panel.add(new JLabel("Y:"));
        panel.add(yField);
        panel.add(new JLabel("Height:"));
        panel.add(heightField);
        panel.add(new JLabel("Width:"));
        panel.add(widthField);

        try {
            int result = JOptionPane.showConfirmDialog(null, panel,
                    "Enter rectangle Properties", JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_OPTION) {

                if (xField.getText().isEmpty() || yField.getText().isEmpty() || heightField.getText().isEmpty() || widthField.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please enter values for X, Y, height, and width.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (Double.parseDouble(xField.getText()) <= 0
                        || Double.parseDouble(yField.getText()) <= 0
                        || Double.parseDouble(heightField.getText()) <= 0 || Double.parseDouble(widthField.getText()) <= 0) {
                    JOptionPane.showMessageDialog(null, "Numbers can't be zero or less", "Message", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (Double.parseDouble(xField.getText()) > 400
                        || Double.parseDouble(yField.getText()) > 500
                        || Double.parseDouble(heightField.getText()) > 200 || Double.parseDouble(widthField.getText()) > 200) {
                    JOptionPane.showMessageDialog(null, "Numbers are too big", "Message", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                Rectangle rect = new Rectangle();
                Point position = new Point();
                position.setLocation(Double.parseDouble(xField.getText()), Double.parseDouble(yField.getText()));
                Map<String, Double> map = new HashMap<>();
                map.put("height", Double.valueOf(heightField.getText()));
                map.put("width", Double.valueOf(widthField.getText()));
                rect.setProperties(map);
                Color c = JColorChooser.showDialog(null, "Choose a Color", Color.BLACK);
                rect.setColor(c);

                rect.setPosition(position);
                shapes.add(rect);
                jPanel1.repaint();
                jCombo.addItem("Rectangle" + i);
                i++;

            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter proper Numbers", "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_rectButtonActionPerformed

    private void colorizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorizeButtonActionPerformed
        int selectedIndex = jCombo.getSelectedIndex();
        if (selectedIndex != -1) {
            Shape selectedShape = shapes.get(selectedIndex);
            Color fillColor = JColorChooser.showDialog(null, "Choose Fill Color", Color.BLACK);
            if (fillColor != null) {
                selectedShape.setFillColor(fillColor);
                jPanel1.repaint();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a shape to colorize.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_colorizeButtonActionPerformed

    private void resizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeButtonActionPerformed
        int selectedIndex = jCombo.getSelectedIndex();
        if (selectedIndex != -1) {
            Shape selectedShape = shapes.get(selectedIndex);

            if ((selectedShape.toString().split(",")[0]).equals("Circle")) {
                JTextField radius = new JTextField(5);

                JPanel panel = new JPanel();
                panel.add(new JLabel("New Radius:"));
                panel.add(radius);

                try {
                    int result = JOptionPane.showConfirmDialog(null, panel,
                            "Enter circle's new Properties", JOptionPane.OK_CANCEL_OPTION);
                    if (result == JOptionPane.OK_OPTION) {
                        if (Double.parseDouble(radius.getText()) <= 0) {
                            JOptionPane.showMessageDialog(null, "Numbers can't be zero or less", "Message", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        if (Double.parseDouble(radius.getText()) > 500) {
                            JOptionPane.showMessageDialog(null, "Numbers are too big", "Message", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        Map<String, Double> m = new HashMap<>();
                        m.put("radius", Double.parseDouble(radius.getText()));
                        selectedShape.setProperties(m);
                        jPanel1.repaint();
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Please enter proper Numbers", "Message", JOptionPane.ERROR_MESSAGE);
                }

            }
            if (selectedShape.toString().split(",")[0].equals("Line")) {
                JTextField length = new JTextField(5);

                JPanel panel = new JPanel();
                panel.add(new JLabel("New Length:"));
                panel.add(length);
                try {
                    int result = JOptionPane.showConfirmDialog(null, panel,
                            "Enter line's new Properties", JOptionPane.OK_CANCEL_OPTION);
                    if (result == JOptionPane.OK_OPTION) {
                        if (Double.parseDouble(length.getText()) <= 0) {
                            JOptionPane.showMessageDialog(null, "Numbers can't be zero or less", "Message", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        if (Double.parseDouble(length.getText()) > 500) {
                            JOptionPane.showMessageDialog(null, "Numbers are too big", "Message", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        Map<String, Double> m = new HashMap<>();
                        m.put("length", Double.parseDouble(length.getText()));
                        selectedShape.setProperties(m);
                        jPanel1.repaint();
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Please enter proper Numbers", "Message", JOptionPane.ERROR_MESSAGE);
                }
            }
            if (selectedShape.toString().split(",")[0].equals("Square")) {
                JTextField length = new JTextField(5);

                JPanel panel = new JPanel();
                panel.add(new JLabel("New Length:"));
                panel.add(length);

                try {
                    int result = JOptionPane.showConfirmDialog(null, panel,
                            "Enter square's new Properties", JOptionPane.OK_CANCEL_OPTION);
                    if (result == JOptionPane.OK_OPTION) {
                        if (Double.parseDouble(length.getText()) <= 0) {
                            JOptionPane.showMessageDialog(null, "Numbers can't be zero or less", "Message", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        if (Double.parseDouble(length.getText()) > 500) {
                            JOptionPane.showMessageDialog(null, "Numbers are too big", "Message", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        Map<String, Double> m = new HashMap<>();
                        m.put("length", Double.parseDouble(length.getText()));
                        selectedShape.setProperties(m);
                        jPanel1.repaint();
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Please enter proper Numbers", "Message", JOptionPane.ERROR_MESSAGE);
                }
            }
            if (selectedShape.toString().split(",")[0].equals("Rectangle")) {
                JTextField height = new JTextField(5);
                JTextField width = new JTextField(5);

                JPanel panel = new JPanel();
                panel.add(new JLabel("New height:"));
                panel.add(height);
                panel.add(new JLabel("New width:"));
                panel.add(width);

                try {
                    int result = JOptionPane.showConfirmDialog(null, panel,
                            "Enter rectangle's new Properties", JOptionPane.OK_CANCEL_OPTION);
                    if (result == JOptionPane.OK_OPTION) {
                        if (Double.parseDouble(height.getText()) <= 0 || Double.parseDouble(width.getText()) <= 0) {
                            JOptionPane.showMessageDialog(null, "Numbers can't be zero or less", "Message", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        if (Double.parseDouble(height.getText()) > 500 || Double.parseDouble(width.getText()) > 500) {
                            JOptionPane.showMessageDialog(null, "Numbers are too big", "Message", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        Map<String, Double> m = new HashMap<>();
                        m.put("height", Double.parseDouble(height.getText()));
                        m.put("width", Double.parseDouble(width.getText()));
                        selectedShape.setProperties(m);
                        jPanel1.repaint();
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Please enter proper Numbers", "Message", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a shape to resize.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_resizeButtonActionPerformed

    private void moveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveButtonActionPerformed
        int selectedIndex = jCombo.getSelectedIndex();
        if (selectedIndex != -1) {
            Shape selectedShape = shapes.get(selectedIndex);
            JTextField xField = new JTextField(5);
            JTextField yField = new JTextField(5);

            JPanel panel = new JPanel();
            panel.add(new JLabel("New X:"));
            panel.add(xField);
            panel.add(new JLabel("New Y:"));
            panel.add(yField);

            try {
                int result = JOptionPane.showConfirmDialog(null, panel,
                        "Enter Properties", JOptionPane.OK_CANCEL_OPTION);
                if (result == JOptionPane.OK_OPTION) {

                    if (xField.getText().isEmpty() || yField.getText().isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Please enter values for X, Y.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    if (Double.parseDouble(xField.getText()) <= 0
                            || Double.parseDouble(yField.getText()) <= 0) {
                        JOptionPane.showMessageDialog(null, "Numbers can't be zero or less", "Message", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    if (Double.parseDouble(xField.getText()) > 400
                            || Double.parseDouble(yField.getText()) > 500) {
                        JOptionPane.showMessageDialog(null, "Numbers are too big", "Message", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    Point position = new Point();
                    position.setLocation(Double.parseDouble(xField.getText()), Double.parseDouble(yField.getText()));
                    selectedShape.setPosition(position);
                    jPanel1.repaint();
                }

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please enter proper Numbers", "Message", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a shape to move.", "Error", JOptionPane.ERROR_MESSAGE);
        }    }//GEN-LAST:event_moveButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (shapes.size() == 0) {
            JOptionPane.showMessageDialog(null, "Please draw shapes to save", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        FileWriter file = null;
        JFileChooser filename = new JFileChooser();
        filename.setDialogTitle("Save Shapes");

        int result = filename.showSaveDialog(null);

        if (result == JFileChooser.APPROVE_OPTION) {
            if (filename.getSelectedFile().getName().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please enter fileName.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!filename.getSelectedFile().getName().endsWith(".txt")) {
                JOptionPane.showMessageDialog(null, "Please enter fileName ends with .txt extension", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(new File(filename.getSelectedFile().getName()).exists())
            {
                JOptionPane.showMessageDialog(null, "Please enter another name as this name is already choosen for another file!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            try {
                file = new FileWriter(filename.getSelectedFile().getName());
            } catch (IOException ex) {
                Logger.getLogger(Frontend.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                for (int i = 0; i < shapes.size(); i++) {

                    file.write(shapes.get(i).toString() + "\n");
                }
                JOptionPane.showMessageDialog(null, "Shapes saved successfully.");

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "An error occured while saving!", "Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(Frontend.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    if (file != null) {
                        file.close();
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Frontend.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        File file;
        Scanner scan = null;
        JFileChooser filename = new JFileChooser();
        filename.setDialogTitle("Save Shapes");

        int result = filename.showSaveDialog(null);

        if (result == JFileChooser.APPROVE_OPTION) {
            if (!filename.getSelectedFile().getName().endsWith(".txt")) {
                JOptionPane.showMessageDialog(null, "File invalid!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            file = new File(filename.getSelectedFile().getName());
            if (!file.exists()) {
                JOptionPane.showMessageDialog(null, "File not found!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            try {
                scan = new Scanner(file);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Frontend.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (!scan.hasNextLine()) {
                JOptionPane.showMessageDialog(null, "File is empty!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            while (scan.hasNextLine()) {
                String[] line = scan.nextLine().split(",");
                if (line[0].trim().equals("Circle")) {

                    Circle c = new Circle();

                    Point p = new Point();
                    p.x = Integer.parseInt(line[1].trim());
                    p.y = Integer.parseInt(line[2].trim());
                    c.setPosition(p);

                    double val = Double.parseDouble(line[3].trim());
                    Map<String, Double> m = new HashMap();
                    m.put("radius", val);
                    c.setProperties(m);

                    c.setColor(parseColor(line[4], line[5], line[6]));
                    if (Integer.parseInt(line[7].trim()) != -1) {
                        c.setFillColor(parseColor(line[7], line[8], line[9]));
                    } else {
                        c.setFillColor(null);
                    }
                    shapes.add(c);
                    jPanel1.repaint();
                    jCombo.addItem("Circle" + i);
                    i++;
                }
                if (line[0].trim().equals("Line")) {
                    Line l = new Line();

                    Point p = new Point();
                    p.x = Integer.parseInt(line[1].trim());
                    p.y = Integer.parseInt(line[2].trim());
                    l.setPosition(p);

                    double val = Double.parseDouble(line[3].trim());
                    Map<String, Double> m = new HashMap();
                    m.put("length", val);
                    l.setProperties(m);

                    l.setColor(parseColor(line[4], line[5], line[6]));
                    l.setFillColor(null);
                    shapes.add(l);
                    jPanel1.repaint();
                    jCombo.addItem("Line" + i);
                    i++;
                }
                if (line[0].equals("Square")) {
                    Square s = new Square();

                    Point p = new Point();
                    p.x = Integer.parseInt(line[1].trim());
                    p.y = Integer.parseInt(line[2].trim());
                    s.setPosition(p);

                    double val = Double.parseDouble(line[3]);
                    Map<String, Double> m = new HashMap();
                    m.put("length", val);
                    s.setProperties(m);

                    s.setColor(parseColor(line[4], line[5], line[6]));
                    if (Integer.parseInt(line[7].trim()) != -1) {
                        s.setFillColor(parseColor(line[7], line[8], line[9]));
                    } else {
                        s.setFillColor(null);
                    }
                    shapes.add(s);
                    jPanel1.repaint();
                    jCombo.addItem("Square" + i);
                    i++;
                }
                if (line[0].equals("Rectangle")) {
                    Rectangle r = new Rectangle();
                    Point p = new Point();
                    p.x = Integer.parseInt(line[1].trim());
                    p.y = Integer.parseInt(line[2].trim());
                    r.setPosition(p);

                    double val1 = Double.parseDouble(line[3].trim());
                    double val2 = Double.parseDouble(line[4].trim());
                    Map<String, Double> m = new HashMap();
                    m.put("height", val1);
                    m.put("width", val2);
                    r.setProperties(m);

                    r.setColor(parseColor(line[5], line[6], line[7]));
                    if (Integer.parseInt(line[8].trim()) != -1) {
                        r.setFillColor(parseColor(line[8], line[9], line[10]));
                    } else {
                        r.setFillColor(null);
                    }
                    shapes.add(r);
                    jPanel1.repaint();
                    jCombo.addItem("Rectangle" + i);
                    i++;
                }
            }
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frontend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frontend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frontend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frontend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frontend().setVisible(true);
            }
        });
    }

    public class ColorChooser {

        public static void main(String[] args) {
            JFrame frame = new JFrame("Color Chooser Example");

            frame.setSize(300, 200);

            JButton chooseColorButton = new JButton("Choose Color");
            chooseColorButton.addActionListener(e -> {
                Color selectedColor = JColorChooser.showDialog(frame, "Choose a Color", Color.BLACK);
                if (selectedColor != null) {

                    frame.getContentPane().setBackground(selectedColor);
                }
            });

            frame.add(chooseColorButton, BorderLayout.CENTER);
            frame.setVisible(true);
        }
    }

    @Override
    public void addShape(Shape shape) {
        shapes.add(shape);
        jPanel1.repaint();
    }

    @Override
    public void removeShape(Shape shape) {
        shapes.remove(shape);
        jPanel1.repaint();
    }

    @Override
    public Shape[] getShapes() {
        return shapes.toArray(new Shape[0]);
    }

    @Override
    public void refresh(Graphics canvas) {
        for (Shape shape : shapes) {
            shape.draw(canvas);
            shape.colorize(canvas);
        }
    }

    private class DrawingPanel extends JPanel {

        @Override
        protected void paintComponent(Graphics canvas) {
            super.paintComponent(canvas);
            refresh(canvas);
        }
    }

    public Color parseColor(String r, String g, String b) {
        int R = Integer.parseInt(r.trim());
        int G = Integer.parseInt(g.trim());
        int B = Integer.parseInt(b.trim());
        return new Color(R, G, B);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton circleButton;
    private javax.swing.JButton colorizeButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox<String> jCombo;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton lineButton;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton moveButton;
    private javax.swing.JButton rectButton;
    private javax.swing.JButton resizeButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton squareButton;
    // End of variables declaration//GEN-END:variables
    private ArrayList<Shape> shapes = new ArrayList<>();
    int i = 0;
}
